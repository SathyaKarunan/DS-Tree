102)  Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000

Approach:
Use queue to store the left and right of each node
Parallely store the tree->val

Code:


class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
    queue<TreeNode*>q;
    if(root==NULL)return {};
    q.push(root);
    vector<vector<int>>ans;
    while(!q.empty()){ 
    int n=q.size();
    vector<int>res;
    while(n--){
    TreeNode* t=q.front();
    q.pop();
    res.push_back(t->val);
    if(t->left)q.push(t->left);
    if(t->right)q.push(t->right);
    }
    ans.push_back(res);
    
    }
    return ans;
    }
};

108. Convert Sorted Array to Binary Search Tree

Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

Example 1:

Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:


Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.

Approach:
since it is said that height has to be balanced,we take middle as root node
Find the mid and set it as root node
Then repeat the same for root->left with elements left to root node value
Then repeat for root->right

Code:

class Solution {
public:
    TreeNode* BST(vector<int>&nums,int low,int high){
    if(low>high)return NULL;
    int mid=low+(high-low)/2;
    TreeNode* node=new TreeNode(nums[mid]);
    node->left=BST(nums,low,mid-1);
    node->right=BST(nums,mid+1,high);
    return node;
    }
    
    TreeNode* sortedArrayToBST(vector<int>& nums) {
    int n=nums.size();
    int low=0,high=n-1;
    TreeNode* node=BST(nums,low,high);
    return node;
    }
};

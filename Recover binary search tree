99. Recover Binary Search Tree
Medium

6400

216

Add to List

Share
You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

 

Example 1:


Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.
Example 2:


Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.
 

Constraints:

The number of nodes in the tree is in the range [2, 1000].
-231 <= Node.val <= 231 - 1
 

Follow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?




Approach:
1)Do the inorder traversal,which will be generally in sorted order
2)So comapore the curr and prev,if prev>curr,store it in two pointers(t1,t2)
3)Traverse further,if there is other swap,then update t2
4)finally swap them 

CODE:
class Solution {
public:
    TreeNode* prev;TreeNode *first;TreeNode *last;
    void inorder(TreeNode*root){
    if(!root)return;
    inorder(root->left);
    if(prev&&root->val<prev->val){
    if(first==NULL){
    //incorrect smaller node is always found as prev node         
     //incorrect larger node is always found as curr node
        first=prev;
    }
        last=root;
        
    }
    prev=root;
    inorder(root->right);
    }
    void recoverTree(TreeNode* root) {
    inorder(root);
    swap(first->val,last->val);
    }
};

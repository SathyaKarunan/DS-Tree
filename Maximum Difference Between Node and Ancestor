Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

 

Example 1:


Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.
Example 2:


Input: root = [1,null,2,null,0,3]
Output: 3
 

Constraints:

The number of nodes in the tree is in the range [2, 5000].
0 <= Node.val <= 105


Approach:
1)Since we need to find the max diff,no need to comapre all nodes with its ancestors
2)Instead we use a maxm and minm to store current maxm and minm value
3)we pass it along with function
4)So it gets updated during every call
5)we find it left and right subtree
6)Finqlly we return the max diff

Code:

class Solution {
public:
    int diff(TreeNode* root,int maxm,int minm){
    if(!root)return maxm-minm;
    maxm=max(maxm,root->val);
    minm=min(minm,root->val);
    int left=diff(root->left,maxm,minm);
    int right=diff(root->right,maxm,minm);
    return max(left,right);
    }
    int maxAncestorDiff(TreeNode* root) {
    return diff(root,root->val,root->val);    
    }
};

105. Construct Binary Tree from Preorder and Inorder Traversal
Medium

Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: preorder = [-1], inorder = [-1]
Output: [-1]
 

Constraints:

1 <= preorder.length <= 3000
inorder.length == preorder.length
-3000 <= preorder[i], inorder[i] <= 3000
preorder and inorder consist of unique values.
Each value of inorder also appears in preorder.
preorder is guaranteed to be the preorder traversal of the tree.
inorder is guaranteed to be the inorder traversal of the tree.

Approach:
1)inorder==>left,node,right
2)preorder==>node,left,right

So it is clear that,for the whole first element at preordr will be the root,using we find where is the rootnode in inorder,
the nodes before that will be left subtree and the nodes after that will be right subtree.
Then we repeat the same steps for the found left tree and left subtree to construct then entire tree.



Code:
class Solution {
public:
    TreeNode* build(vector<int>&preorder,vector<int>&inorder,int &index,int left,int right){
        if(left>right)return NULL;
        int ind=left;
        while(preorder[index]!=inorder[ind]){
            ind++;
        }
        TreeNode* node= new TreeNode(preorder[index]);
        index++;
        node->left=build(preorder,inorder,index,left,ind-1);
        node->right=build(preorder,inorder,index,ind+1,right);
        return node;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
    int index=0;
    return build(preorder,inorder,index,0,inorder.size()-1);  
    }
};


Note:
rootIdx increases in the left tree, and the increased index needs to be used in the right tree. Check this part of the recursion. If there are five nodes in the left tree, rootIdx will get increased by 5. And then the right node will get visited.

newNode->left = build(preorder, inorder, rootIdx, left, pivot-1);
newNode->right = build(preorder, inorder, rootIdx, pivot+1, right);
we're already doing that by incrementing "rootIdx" and sending it to next fn.

No. It is passed as an address, not the value. Check out how call by reference works.

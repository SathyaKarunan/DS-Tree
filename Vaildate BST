98. Validate Binary Search Tree
Medium

13250

1071

Add to List

Share
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].

-231 <= Node.val <= 231 - 1

Approach:
1)Have two pointers min and max
2)left nodes should have value between minm and root
3)right nodes should have value btw root and maxm  

Code:
class Solution {
public:
    bool isValid(TreeNode* root,long minm,long maxm){
    if(!root)return true;
    if(root->val<=minm||root->val>=maxm)return false;
    return isValid(root->left,minm,root->val)&&isValid(root->right,root->val,maxm);
    }
    bool isValidBST(TreeNode* root) {
    return isValid(root,LONG_MIN,LONG_MAX);
    }
    };
